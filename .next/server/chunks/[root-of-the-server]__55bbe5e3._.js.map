{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/lib/excel.ts"],"sourcesContent":["import * as XLSX from 'xlsx'\n\nexport interface UserRecord {\n  username: string\n  password: string\n  name?: string\n  role?: string\n}\n\nexport interface FieldRecord {\n  id: string\n  timestamp: string\n  customerName: string\n  phoneNumber: string\n  location: string\n  businessName: string\n  latitude: number\n  longitude: number\n  address: string\n  photoBase64: string\n  userId: string\n}\n\n// Create sample users data if file doesn't exist\nexport const createSampleUsersFile = (): UserRecord[] => {\n  return [\n    { username: 'admin', password: 'admin123', name: 'Administrator', role: 'admin' },\n    { username: 'field1', password: 'field123', name: 'Field Worker 1', role: 'field' },\n    { username: 'field2', password: 'field456', name: 'Field Worker 2', role: 'field' },\n    { username: 'demo', password: 'demo', name: 'Demo User', role: 'demo' }\n  ]\n}\n\n// Read Excel file and return data as array of objects\nexport const readExcelFile = (buffer: ArrayBuffer): any[] => {\n  try {\n    const workbook = XLSX.read(buffer, { type: 'array' })\n    const sheetName = workbook.SheetNames[0]\n    const worksheet = workbook.Sheets[sheetName]\n    return XLSX.utils.sheet_to_json(worksheet)\n  } catch (error) {\n    console.error('Error reading Excel file:', error)\n    return []\n  }\n}\n\n// Convert data array to Excel buffer\nexport const createExcelBuffer = (data: any[], sheetName: string = 'Sheet1'): ArrayBuffer => {\n  try {\n    const worksheet = XLSX.utils.json_to_sheet(data)\n    const workbook = XLSX.utils.book_new()\n    XLSX.utils.book_append_sheet(workbook, worksheet, sheetName)\n    return XLSX.write(workbook, { bookType: 'xlsx', type: 'array' })\n  } catch (error) {\n    console.error('Error creating Excel buffer:', error)\n    throw new Error('Failed to create Excel file')\n  }\n}\n\n// Validate user credentials against users data\nexport const validateUser = (users: UserRecord[], username: string, password: string): UserRecord | null => {\n  const user = users.find(u => u.username === username && u.password === password)\n  return user || null\n}\n\n// Add new field record to existing records\nexport const addFieldRecord = (existingRecords: FieldRecord[], newRecord: FieldRecord): FieldRecord[] => {\n  return [...existingRecords, newRecord]\n}\n\n// Generate unique ID for records\nexport const generateRecordId = (): string => {\n  return `VISIT_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n}\n\n// Format record for Excel export\nexport const formatRecordForExcel = (record: FieldRecord) => {\n  return {\n    'Record ID': record.id,\n    'Timestamp': record.timestamp,\n    'Customer Name': record.customerName,\n    'Phone Number': record.phoneNumber,\n    'Business Name': record.businessName,\n    'Location': record.location,\n    'Address': record.address,\n    'Latitude': record.latitude,\n    'Longitude': record.longitude,\n    'User ID': record.userId,\n    'Photo': record.photoBase64 ? 'Photo Attached' : 'No Photo'\n  }\n}\n\n// Get sample field records for demo\nexport const getSampleFieldRecords = (): FieldRecord[] => {\n  return [\n    {\n      id: generateRecordId(),\n      timestamp: new Date().toISOString(),\n      customerName: 'John Doe',\n      phoneNumber: '+1234567890',\n      location: 'Downtown Office',\n      businessName: 'Tech Solutions Inc',\n      latitude: 40.7128,\n      longitude: -74.0060,\n      address: '123 Main St, New York, NY',\n      photoBase64: '',\n      userId: 'demo'\n    }\n  ]\n}\n"],"names":[],"mappings":";;;;;;;;;;AAAA;;AAwBO,MAAM,wBAAwB;IACnC,OAAO;QACL;YAAE,UAAU;YAAS,UAAU;YAAY,MAAM;YAAiB,MAAM;QAAQ;QAChF;YAAE,UAAU;YAAU,UAAU;YAAY,MAAM;YAAkB,MAAM;QAAQ;QAClF;YAAE,UAAU;YAAU,UAAU;YAAY,MAAM;YAAkB,MAAM;QAAQ;QAClF;YAAE,UAAU;YAAQ,UAAU;YAAQ,MAAM;YAAa,MAAM;QAAO;KACvE;AACH;AAGO,MAAM,gBAAgB,CAAC;IAC5B,IAAI;QACF,MAAM,WAAW,CAAA,GAAA,+HAAA,CAAA,OAAS,AAAD,EAAE,QAAQ;YAAE,MAAM;QAAQ;QACnD,MAAM,YAAY,SAAS,UAAU,CAAC,EAAE;QACxC,MAAM,YAAY,SAAS,MAAM,CAAC,UAAU;QAC5C,OAAO,+HAAA,CAAA,QAAU,CAAC,aAAa,CAAC;IAClC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,EAAE;IACX;AACF;AAGO,MAAM,oBAAoB,CAAC,MAAa,YAAoB,QAAQ;IACzE,IAAI;QACF,MAAM,YAAY,+HAAA,CAAA,QAAU,CAAC,aAAa,CAAC;QAC3C,MAAM,WAAW,+HAAA,CAAA,QAAU,CAAC,QAAQ;QACpC,+HAAA,CAAA,QAAU,CAAC,iBAAiB,CAAC,UAAU,WAAW;QAClD,OAAO,CAAA,GAAA,+HAAA,CAAA,QAAU,AAAD,EAAE,UAAU;YAAE,UAAU;YAAQ,MAAM;QAAQ;IAChE,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,MAAM,IAAI,MAAM;IAClB;AACF;AAGO,MAAM,eAAe,CAAC,OAAqB,UAAkB;IAClE,MAAM,OAAO,MAAM,IAAI,CAAC,CAAA,IAAK,EAAE,QAAQ,KAAK,YAAY,EAAE,QAAQ,KAAK;IACvE,OAAO,QAAQ;AACjB;AAGO,MAAM,iBAAiB,CAAC,iBAAgC;IAC7D,OAAO;WAAI;QAAiB;KAAU;AACxC;AAGO,MAAM,mBAAmB;IAC9B,OAAO,CAAC,MAAM,EAAE,KAAK,GAAG,GAAG,CAAC,EAAE,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,MAAM,CAAC,GAAG,IAAI;AACzE;AAGO,MAAM,uBAAuB,CAAC;IACnC,OAAO;QACL,aAAa,OAAO,EAAE;QACtB,aAAa,OAAO,SAAS;QAC7B,iBAAiB,OAAO,YAAY;QACpC,gBAAgB,OAAO,WAAW;QAClC,iBAAiB,OAAO,YAAY;QACpC,YAAY,OAAO,QAAQ;QAC3B,WAAW,OAAO,OAAO;QACzB,YAAY,OAAO,QAAQ;QAC3B,aAAa,OAAO,SAAS;QAC7B,WAAW,OAAO,MAAM;QACxB,SAAS,OAAO,WAAW,GAAG,mBAAmB;IACnD;AACF;AAGO,MAAM,wBAAwB;IACnC,OAAO;QACL;YACE,IAAI;YACJ,WAAW,IAAI,OAAO,WAAW;YACjC,cAAc;YACd,aAAa;YACb,UAAU;YACV,cAAc;YACd,UAAU;YACV,WAAW,CAAC;YACZ,SAAS;YACT,aAAa;YACb,QAAQ;QACV;KACD;AACH","debugId":null}},
    {"offset": {"line": 178, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/app/api/upload/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { FieldRecord, getSampleFieldRecords, addFieldRecord, formatRecordForExcel } from '@/lib/excel'\n\n// In-memory storage for demo purposes\n// In a real application, you would store this in a database or file system\nlet fieldRecords: FieldRecord[] = getSampleFieldRecords()\n\nexport async function POST(request: NextRequest) {\n  try {\n    const recordData: FieldRecord = await request.json()\n\n    // Validate required fields\n    if (!recordData.customerName?.trim()) {\n      return NextResponse.json(\n        { success: false, error: 'Customer name is required' },\n        { status: 400 }\n      )\n    }\n\n    if (!recordData.photoBase64) {\n      return NextResponse.json(\n        { success: false, error: 'Photo is required' },\n        { status: 400 }\n      )\n    }\n\n    if (!recordData.latitude || !recordData.longitude) {\n      return NextResponse.json(\n        { success: false, error: 'Location data is required' },\n        { status: 400 }\n      )\n    }\n\n    // Validate data types\n    if (typeof recordData.latitude !== 'number' || typeof recordData.longitude !== 'number') {\n      return NextResponse.json(\n        { success: false, error: 'Invalid location coordinates' },\n        { status: 400 }\n      )\n    }\n\n    // Add timestamp if not provided\n    if (!recordData.timestamp) {\n      recordData.timestamp = new Date().toISOString()\n    }\n\n    // Add the record to our in-memory storage\n    fieldRecords = addFieldRecord(fieldRecords, recordData)\n\n    console.log(`New field record added: ${recordData.id} for customer: ${recordData.customerName}`)\n\n    return NextResponse.json({\n      success: true,\n      message: 'Record saved successfully',\n      recordId: recordData.id,\n      totalRecords: fieldRecords.length\n    })\n\n  } catch (error) {\n    console.error('Upload API error:', error)\n    \n    // Handle JSON parsing errors\n    if (error instanceof SyntaxError) {\n      return NextResponse.json(\n        { success: false, error: 'Invalid JSON data' },\n        { status: 400 }\n      )\n    }\n\n    return NextResponse.json(\n      { success: false, error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n\n// GET endpoint to retrieve all records\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url)\n    const userId = searchParams.get('userId')\n    const limit = parseInt(searchParams.get('limit') || '50')\n    const offset = parseInt(searchParams.get('offset') || '0')\n\n    let filteredRecords = fieldRecords\n\n    // Filter by user if specified\n    if (userId) {\n      filteredRecords = fieldRecords.filter(record => record.userId === userId)\n    }\n\n    // Apply pagination\n    const paginatedRecords = filteredRecords.slice(offset, offset + limit)\n\n    // Format records for response (exclude large photo data for list view)\n    const recordsForResponse = paginatedRecords.map(record => ({\n      ...record,\n      photoBase64: record.photoBase64 ? 'Photo Available' : 'No Photo',\n      photoSize: record.photoBase64 ? `${Math.round(record.photoBase64.length / 1024)} KB` : '0 KB'\n    }))\n\n    return NextResponse.json({\n      success: true,\n      records: recordsForResponse,\n      totalRecords: filteredRecords.length,\n      pagination: {\n        limit,\n        offset,\n        hasMore: offset + limit < filteredRecords.length\n      }\n    })\n\n  } catch (error) {\n    console.error('Get records API error:', error)\n    return NextResponse.json(\n      { success: false, error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n\n// DELETE endpoint to remove a specific record\nexport async function DELETE(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url)\n    const recordId = searchParams.get('id')\n\n    if (!recordId) {\n      return NextResponse.json(\n        { success: false, error: 'Record ID is required' },\n        { status: 400 }\n      )\n    }\n\n    const initialLength = fieldRecords.length\n    fieldRecords = fieldRecords.filter(record => record.id !== recordId)\n\n    if (fieldRecords.length === initialLength) {\n      return NextResponse.json(\n        { success: false, error: 'Record not found' },\n        { status: 404 }\n      )\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: 'Record deleted successfully',\n      deletedRecordId: recordId,\n      remainingRecords: fieldRecords.length\n    })\n\n  } catch (error) {\n    console.error('Delete record API error:', error)\n    return NextResponse.json(\n      { success: false, error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}